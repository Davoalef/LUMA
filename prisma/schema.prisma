generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ActorRole {
  ADMIN
  STUDENT
  TEACHER
}

enum UserSex {
  MALE
  FEMALE
  NON_BINARY
  UNDISCLOSED
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

model Actor {
  id        String    @id @default(uuid()) @db.Uuid
  username  String    @unique @db.VarChar(32)
  name      String    @db.VarChar(64)
  surname   String    @db.VarChar(64)
  email     String?   @unique @db.VarChar(64)
  phone     String?   @unique @db.VarChar(16)
  address   String    @db.VarChar(128)
  img       String?   @db.VarChar(256)
  bloodType String    @db.VarChar(3)
  sex       UserSex
  birthday  DateTime
  createdAt DateTime  @default(now())

  role      ActorRole

  student   Student?
  teacher   Teacher?
  admin     Admin?
}

model Admin {
  id    String @id @db.Uuid
  actor Actor  @relation(fields: [id], references: [id])
}

model Parent {
  id        String   @id @default(uuid()) @db.Uuid
  username  String   @unique @db.VarChar(32)
  name      String   @db.VarChar(64)
  surname   String   @db.VarChar(64)
  email     String?  @unique @db.VarChar(64)
  phone     String   @unique @db.VarChar(16)
  address   String   @db.VarChar(128)
  createdAt DateTime @default(now())

  students  Student[]
}

model Student {
  id          String       @id @db.Uuid
  actor       Actor        @relation(fields: [id], references: [id])
  parentId    String       @db.Uuid
  parent      Parent       @relation(fields: [parentId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  gradeId     Int
  grade       Grade        @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]
}

model Teacher {
  id        String    @id @db.Uuid
  actor     Actor     @relation(fields: [id], references: [id])
  subjects  Subject[]
  lessons   Lesson[]
  classes   Class[]   @relation("ClassSupervisor")
}

model Grade {
  id       Int       @id @default(autoincrement())
  level    Int       @unique
  students Student[]
  classess Class[]
}

model Class {
  id           Int           @id @default(autoincrement())
  name         String        @unique @db.VarChar(32)
  capacity     Int
  supervisorId String?       @db.Uuid
  supervisor   Teacher?      @relation("ClassSupervisor", fields: [supervisorId], references: [id])
  lessons      Lesson[]
  students     Student[]
  gradeId      Int
  grade        Grade         @relation(fields: [gradeId], references: [id])
  events       Event[]
  announcements Announcement[]
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(64)
  teachers Teacher[]
  lessons  Lesson[]
}

model Lesson {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(64)
  day       Day
  startTime DateTime
  endTime   DateTime

  subjectId Int
  subject   Subject    @relation(fields: [subjectId], references: [id])
  classId   Int
  class     Class      @relation(fields: [classId], references: [id])
  teacherId String     @db.Uuid
  teacher   Teacher    @relation(fields: [teacherId], references: [id])

  exams     Exam[]
  assignments Assignment[]
  attendances Attendance[]
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(128)
  startTime DateTime
  endTime   DateTime

  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(128)
  startDate DateTime
  dueDate   DateTime

  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Int

  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String      @db.Uuid
  student      Student     @relation(fields: [studentId], references: [id])

  @@index([studentId, examId])
  @@index([studentId, assignmentId])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId String   @db.Uuid
  student   Student  @relation(fields: [studentId], references: [id])
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(128)
  description String   @db.Text
  startTime   DateTime
  endTime     DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(128)
  description String   @db.Text
  date        DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}
